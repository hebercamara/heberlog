<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prestador - Presença</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- QR Code scanner library (jsQR) -->
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.1.0/dist/jsQR.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
        }
        .container {
            max-width: 90%; /* Largura fluida para mobile */
            margin: auto;
            padding: 1rem; /* Preenchimento responsivo */
        }
        @media (min-width: 768px) {
            .container {
                max-width: 768px; /* Largura máxima para telas maiores */
            }
        }
        /* Estilos do modal personalizado */
        .modal {
            display: none; /* Oculto por padrão */
            position: fixed; /* Posição fixa */
            z-index: 1000; /* Acima de tudo */
            left: 0;
            top: 0;
            width: 100%; /* Largura total */
            height: 100%; /* Altura total */
            overflow: auto; /* Permite rolagem se necessário */
            background-color: rgba(0,0,0,0.4); /* Preto com opacidade */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background-color: #fefefe;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            max-width: 90%; /* Largura responsiva */
            margin: auto;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Estilo para o vídeo e canvas enquanto escaneia */
        #video, #canvas {
            transform: scaleX(-1); /* Espelha a imagem para ter a mesma perspectiva que a pessoa vê no espelho */
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col justify-center items-center">

    <!-- Página de Login para Prestador de Serviço -->
    <div id="login-page" class="container bg-white p-8 rounded-xl shadow-lg mt-8 flex flex-col items-center">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Login do Prestador</h1>
        <form id="loginForm" class="w-full max-w-sm">
            <div class="mb-4">
                <label for="username" class="block text-gray-700 text-sm font-bold mb-2">CPF:</label>
                <input type="text" id="username" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Digite seu CPF (apenas números)">
            </div>
            <div class="mb-6">
                <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Senha:</label>
                <input type="password" id="password" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 mb-3 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="********">
            </div>
            <div class="flex items-center justify-between">
                <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 w-full">
                    Entrar
                </button>
            </div>
        </form>
    </div>

    <!-- Página de Escaneamento de QR Code -->
    <div id="scanner-page" class="container bg-white p-8 rounded-xl shadow-lg mt-8 hidden flex-col items-center">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Escanear QR Code</h1>
        <div class="mb-6 w-full flex flex-col items-center">
            <p class="text-gray-700 mb-4 text-center">Aponte a câmera para o QR Code diário na tela.</p>
            <video id="video" class="w-full max-w-sm rounded-lg shadow-md border border-gray-200" style="display: none;"></video>
            <canvas id="canvas" class="w-full max-w-sm rounded-lg shadow-md border border-gray-200" style="display: none;"></canvas>
            <div id="output" class="text-center text-red-500 mt-4 text-sm font-medium"></div>
            <button id="startScannerBtn" class="mt-6 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105">
                Iniciar Câmera
            </button>
            <button id="stopScannerBtn" class="mt-4 bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 hidden">
                Parar Câmera
            </button>
        </div>
        <button id="logoutBtn" class="mt-6 text-blue-600 hover:underline">Sair</button>
    </div>

    <!-- Modal para mensagens -->
    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <p id="modalMessage" class="text-gray-800 text-lg text-center"></p>
            <div class="flex justify-center mt-4">
                <button id="modalCloseBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out">
                    OK
                </button>
            </div>
        </div>
    </div>

    <script type="module">
        // Importa os módulos necessários do Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signInAnonymously, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, collection, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Variáveis globais fornecidas pelo ambiente Canvas (se existirem)
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Inicializa o Firebase
        let app;
        let db;
        let auth;
        let userId;

        // Usuários simulados (em um sistema real, seriam geridos no Firebase Authentication e/ou Firestore)
        // Para este modelo, usaremos CPF como email e senha simplificada para login via Firebase Auth.
        // Você precisará CRIAR esses usuários no Firebase Authentication manualmente para testar.
        // Ex: Crie um usuário com email "12345678900@prestador.com" e senha "senha123" no console do Firebase Auth.
        const simulatedUsers = {
            '12345678900': { name: 'João Silva', email: '12345678900@prestador.com' },
            '98765432199': { name: 'Maria Oliveira', email: '98765432199@prestador.com' },
            '11122233344': { name: 'Carlos Souza', email: '11122233344@prestador.com' },
        };

        let currentLoggedInUser = null;
        let videoStream = null;
        let animationFrameId = null;

        // Elementos do DOM
        const loginPage = document.getElementById('login-page');
        const scannerPage = document.getElementById('scanner-page');
        const loginForm = document.getElementById('loginForm');
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const output = document.getElementById('output');
        const startScannerBtn = document.getElementById('startScannerBtn');
        const stopScannerBtn = document.getElementById('stopScannerBtn');
        const logoutBtn = document.getElementById('logoutBtn');

        // Elementos do modal
        const messageModal = document.getElementById('messageModal');
        const modalMessage = document.getElementById('modalMessage');
        const modalCloseBtn = document.getElementById('modalCloseBtn');
        const closeButton = document.querySelector('.close-button');

        // --- Funções do Modal ---
        function showModal(message) {
            modalMessage.textContent = message || "Ocorreu um erro desconhecido.";
            messageModal.style.display = 'flex';
        }

        function hideModal() {
            modalMessage.textContent = '';
            messageModal.style.display = 'none';
        }

        closeButton.onclick = hideModal;
        modalCloseBtn.onclick = hideModal;

        // --- Funções de Navegação ---
        function showPage(pageId) {
            loginPage.classList.add('hidden');
            scannerPage.classList.add('hidden');
            document.getElementById(pageId).classList.remove('hidden');
            document.getElementById(pageId).classList.add('flex');
        }

        function showLoginPage() {
            stopScanner();
            usernameInput.value = '';
            passwordInput.value = '';
            currentLoggedInUser = null;
            auth.signOut(); // Desloga o usuário do Firebase Auth
            showPage('login-page');
        }

        function showScannerPage() {
            showPage('scanner-page');
            startScannerBtn.classList.remove('hidden');
            stopScannerBtn.classList.add('hidden');
            output.textContent = '';
        }

        // --- Lógica de Login via Firebase Authentication ---
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const cpf = usernameInput.value.replace(/\D/g, ''); // Remove não-dígitos para CPF
            const password = passwordInput.value;

            const userLookup = simulatedUsers[cpf];

            if (!userLookup) {
                showModal('CPF não encontrado. Por favor, verifique seu CPF.');
                return;
            }

            try {
                // Firebase Auth precisa de um formato de email válido. Usamos um email "fictício".
                const userCredential = await signInWithEmailAndPassword(auth, userLookup.email, password);
                currentLoggedInUser = {
                    uid: userCredential.user.uid,
                    name: userLookup.name,
                    cpf: cpf,
                    email: userLookup.email
                };
                showScannerPage();
                showModal(`Bem-vindo, ${currentLoggedInUser.name}! Agora aponte a câmera para o QR Code.`);
            } catch (error) {
                console.error("Erro no login:", error);
                let errorMessage = 'Erro ao fazer login. Verifique seu CPF e senha.';
                if (error.code === 'auth/wrong-password') {
                    errorMessage = 'Senha incorreta. Tente novamente.';
                } else if (error.code === 'auth/user-not-found') {
                    errorMessage = 'Usuário não encontrado. Verifique seu CPF.';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'Formato de CPF inválido para login (interno).';
                }
                showModal(errorMessage);
            }
        });

        // --- Lógica de Escaneamento de QR Code ---
        let videoInitialized = false;
        let qrCodeTimeout = null; // Para controlar o tempo limite de leitura

        async function startScanner() {
            if (videoInitialized && videoStream && videoStream.active) {
                video.style.display = 'block';
                canvas.style.display = 'none';
                output.textContent = 'Câmera iniciada. Escaneando QR Code...';
                startDecoding();
                return;
            }

            try {
                videoStream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        facingMode: 'environment',
                        width: { ideal: 640 },
                        height: { ideal: 480 }
                    }
                });
                video.srcObject = videoStream;
                video.setAttribute('playsinline', true);
                video.play();
                video.style.display = 'block';
                canvas.style.display = 'none';
                startScannerBtn.classList.add('hidden');
                stopScannerBtn.classList.remove('hidden');
                videoInitialized = true;
                output.textContent = 'Câmera iniciada. Escaneando QR Code...';
                
                video.onloadedmetadata = () => {
                    startDecoding();
                };

            } catch (err) {
                console.error("Erro ao acessar a câmera: ", err);
                output.textContent = `Erro ao acessar a câmera: ${err.name}. Verifique as permissões.`;
                showModal(`Não foi possível acessar a câmera: ${err.message}. Por favor, verifique as permissões do navegador e tente novamente.`);
                stopScanner();
            }
        }

        function stopScanner() {
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                videoStream = null;
                video.srcObject = null;
                video.style.display = 'none';
                canvas.style.display = 'none';
                startScannerBtn.classList.remove('hidden');
                stopScannerBtn.classList.add('hidden');
                cancelAnimationFrame(animationFrameId);
                output.textContent = 'Câmera parada.';
                videoInitialized = false;
            }
        }

        function startDecoding() {
            if (!videoStream || !videoStream.active) {
                console.warn("Stream de vídeo não está ativo para decodificação.");
                return;
            }

            const canvasCtx = canvas.getContext('2d');
            
            function tick() {
                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    canvas.hidden = false;
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    canvasCtx.drawImage(video, 0, 0, canvas.width, canvas.height);
                    const imageData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, imageData.width, imageData.height, {
                        inversionAttempts: "dontInvert",
                    });

                    if (code) {
                        output.textContent = 'QR Code detectado!';
                        handleQrCodeScan(code.data);
                        stopScanner();
                        return;
                    } else {
                        output.textContent = 'Procurando QR Code...';
                    }
                }
                animationFrameId = requestAnimationFrame(tick);
            }
            cancelAnimationFrame(animationFrameId);
            animationFrameId = requestAnimationFrame(tick);
        }

        async function handleQrCodeScan(scannedData) {
            if (!currentLoggedInUser) {
                showModal('Erro: Você precisa estar logado para escanear o QR Code.');
                showLoginPage();
                return;
            }

            const today = new Date().toISOString().slice(0, 10);
            const qrCodeDocRef = doc(db, `app_data/${appId}/daily_qr_code/current_qr`);

            try {
                const qrCodeDocSnap = await getDoc(qrCodeDocRef);
                if (qrCodeDocSnap.exists()) {
                    const qrCodeData = qrCodeDocSnap.data();
                    // Valida se o QR Code escaneado corresponde ao armazenado no Firestore e se é do dia atual
                    if (qrCodeData.value === scannedData && qrCodeData.date === today) {
                        await recordAttendance(currentLoggedInUser.cpf, currentLoggedInUser.name);
                        showModal(`Presença registrada com sucesso para ${currentLoggedInUser.name}!`);
                        setTimeout(() => showLoginPage(), 1500); // Volta para o login
                    } else {
                        showModal('QR Code inválido ou expirado. Por favor, escaneie o QR Code do dia atual exibido na transportadora.');
                        startScanner(); // Reinicia o scanner
                    }
                } else {
                    showModal('Nenhum QR Code diário encontrado no sistema. Por favor, contate o administrador.');
                    startScanner(); // Reinicia o scanner
                }
            } catch (error) {
                console.error("Erro ao validar QR Code no Firestore:", error);
                showModal(`Erro ao validar QR Code: ${error.message}.`);
                startScanner(); // Reinicia o scanner
            }
        }

        // --- Registro de Presença no Firestore ---
        async function recordAttendance(cpf, name) {
            if (!db || !currentLoggedInUser) {
                showModal('Erro: O sistema não está pronto para registrar a presença.');
                return;
            }
            const today = getTodayDateString();
            const attendanceDocRef = doc(db, `app_data/${appId}/attendance/${today}/records`, cpf); // Documento por CPF para garantir unicidade por dia

            try {
                await setDoc(attendanceDocRef, {
                    cpf: cpf,
                    name: name,
                    checkInTime: new Date().toLocaleTimeString('pt-BR'),
                    timestamp: serverTimestamp() // Carimbo de data/hora do servidor
                });
                console.log(`Presença de ${name} (${cpf}) registrada no Firestore.`);
            } catch (error) {
                console.error("Erro ao registrar presença no Firestore:", error);
                showModal(`Erro ao registrar presença: ${error.message}`);
            }
        }

        // --- Inicialização do Firebase e Autenticação ---
        async function initializeFirebaseAndAuth() {
            if (!app) {
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
            }

            // O `onAuthStateChanged` é essencial para saber quando o Firebase Auth está pronto
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid; // ID do usuário logado (prestador)
                    console.log("Firebase Auth pronto. Logado como:", userId);
                    // Aqui, se o usuário já estiver logado, podemos levá-lo direto para a página do scanner
                    if (window.location.hash === '#scanner') { // Exemplo: se o URL tiver #scanner
                         showScannerPage();
                    } else {
                         showLoginPage(); // Ou sempre voltar para o login para uma nova sessão de check-in
                    }
                } else {
                    console.log("Nenhum usuário logado. Pronto para o login.");
                    showLoginPage(); // Garante que a página de login seja exibida
                }
            });
        }

        // --- Event Listeners ---
        startScannerBtn.addEventListener('click', startScanner);
        stopScannerBtn.addEventListener('click', stopScanner);
        logoutBtn.addEventListener('click', showLoginPage);

        // --- Início da Aplicação ---
        window.onload = initializeFirebaseAndAuth;
    </script>
</body>
</html>
